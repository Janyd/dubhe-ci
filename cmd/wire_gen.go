// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"dubhe-ci/config"
	"dubhe-ci/handler/api/branch"
	build2 "dubhe-ci/handler/api/build"
	cred2 "dubhe-ci/handler/api/cred"
	logs2 "dubhe-ci/handler/api/logs"
	repo2 "dubhe-ci/handler/api/repo"
	"dubhe-ci/handler/api/user"
	"dubhe-ci/handler/auth"
	config2 "dubhe-ci/plugins/config"
	"dubhe-ci/runner"
	"dubhe-ci/runner/compiler"
	"dubhe-ci/runner/streamer/livelog"
	"dubhe-ci/scheduler/queue"
	"dubhe-ci/service/repos"
	"dubhe-ci/service/trigger"
	"dubhe-ci/socket"
	"dubhe-ci/store/build"
	"dubhe-ci/store/cred"
	"dubhe-ci/store/logs"
	"dubhe-ci/store/repo"
	"dubhe-ci/store/step"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func InitializeApplication(config3 *config.Config) (application, error) {
	db, err := provideDatabase(config3)
	if err != nil {
		return application{}, err
	}
	logStore := logs.New(db)
	stepStore := step.New(db)
	logStream := livelog.New(logStore, stepStore)
	stepEvent := socket.NewStepEvent(logStream)
	events := provideEvents(stepEvent)
	socketIOServer := provideSocketIOServer(events)
	repositoryStore := repo.New(db)
	branchStore := repo.NewBranchStore(db)
	credentialStore := cred.New(db)
	gitService := provideGitService(config3)
	fileService := provideFileService(config3)
	configService := config2.Repository(fileService)
	convertService := provideConverter()
	buildStore := build.New(db, stepStore)
	scheduler := queue.New(buildStore)
	triggerService := trigger.New(configService, convertService, repositoryStore, buildStore, branchStore, scheduler)
	repositoryService := repos.NewRepoService(repositoryStore, branchStore, credentialStore, gitService, triggerService)
	credentialService := repos.NewCredentialService(credentialStore)
	branchService := repos.NewBranchService(branchStore, triggerService)
	registers := provideRegisters(repositoryService, credentialService, branchService)
	grpcServer := provideServer(registers, config3)
	repositoryHandler := repo2.New(repositoryService)
	credentialHandler := cred2.New(credentialService)
	branchesHandler := branch.New(branchService)
	jwt := auth.NewJWT()
	usersHandler := user.New(config3, jwt)
	buildService := repos.NewBuildService(buildStore, branchStore, stepStore)
	buildsHandler := build2.New(buildService)
	logHandler := logs2.New(logStore)
	routers := provideRouters(repositoryHandler, credentialHandler, branchesHandler, usersHandler, buildsHandler, logHandler, socketIOServer)
	ginServer := provideGinServer(config3, routers, jwt)
	manager := runner.NewManager(repositoryStore, branchStore, buildStore, configService, scheduler, convertService, stepStore, logStream, logStore, socketIOServer)
	compilerCompiler := compiler.New(credentialStore)
	runnerRunner := provideRunner(manager, compilerCompiler, buildStore, config3)
	mainApplication := newApplication(socketIOServer, grpcServer, ginServer, runnerRunner)
	return mainApplication, nil
}
