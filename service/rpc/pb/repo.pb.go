// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: repo.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Repo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Url          string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	CredentialId string `protobuf:"bytes,5,opt,name=credentialId,proto3" json:"credentialId,omitempty"`
	Active       bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Counter      uint32 `protobuf:"varint,7,opt,name=counter,proto3" json:"counter,omitempty"`
	Timeout      int32  `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Config       string `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	CreatedAt    int64  `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Repo) Reset() {
	*x = Repo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repo) ProtoMessage() {}

func (x *Repo) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repo.ProtoReflect.Descriptor instead.
func (*Repo) Descriptor() ([]byte, []int) {
	return file_repo_proto_rawDescGZIP(), []int{0}
}

func (x *Repo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Repo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Repo) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *Repo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Repo) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *Repo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Repo) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Repo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Repo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RepoRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  *Page   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Repos []*Repo `protobuf:"bytes,2,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *RepoRecords) Reset() {
	*x = RepoRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoRecords) ProtoMessage() {}

func (x *RepoRecords) ProtoReflect() protoreflect.Message {
	mi := &file_repo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoRecords.ProtoReflect.Descriptor instead.
func (*RepoRecords) Descriptor() ([]byte, []int) {
	return file_repo_proto_rawDescGZIP(), []int{1}
}

func (x *RepoRecords) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RepoRecords) GetRepos() []*Repo {
	if x != nil {
		return x.Repos
	}
	return nil
}

var File_repo_proto protoreflect.FileDescriptor

var file_repo_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x75,
	0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5f, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x32, 0x91, 0x02, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x64,
	0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x1a, 0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x10,
	0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64,
	0x1a, 0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x1a, 0x13, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f,
	0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x15,
	0x0a, 0x0d, 0x63, 0x6e, 0x2e, 0x6a, 0x61, 0x6e, 0x79, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a,
	0x04, 0x2e, 0x3b, 0x70, 0x62, 0x50, 0x00, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_repo_proto_rawDescOnce sync.Once
	file_repo_proto_rawDescData = file_repo_proto_rawDesc
)

func file_repo_proto_rawDescGZIP() []byte {
	file_repo_proto_rawDescOnce.Do(func() {
		file_repo_proto_rawDescData = protoimpl.X.CompressGZIP(file_repo_proto_rawDescData)
	})
	return file_repo_proto_rawDescData
}

var file_repo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_repo_proto_goTypes = []interface{}{
	(*Repo)(nil),        // 0: dubhe_ci.rpc.Repo
	(*RepoRecords)(nil), // 1: dubhe_ci.rpc.RepoRecords
	(*Page)(nil),        // 2: dubhe_ci.rpc.Page
	(*Id)(nil),          // 3: dubhe_ci.rpc.Id
	(*Empty)(nil),       // 4: dubhe_ci.rpc.Empty
}
var file_repo_proto_depIdxs = []int32{
	2, // 0: dubhe_ci.rpc.RepoRecords.page:type_name -> dubhe_ci.rpc.Page
	0, // 1: dubhe_ci.rpc.RepoRecords.repos:type_name -> dubhe_ci.rpc.Repo
	2, // 2: dubhe_ci.rpc.Repository.List:input_type -> dubhe_ci.rpc.Page
	0, // 3: dubhe_ci.rpc.Repository.Create:input_type -> dubhe_ci.rpc.Repo
	3, // 4: dubhe_ci.rpc.Repository.Find:input_type -> dubhe_ci.rpc.Id
	0, // 5: dubhe_ci.rpc.Repository.Update:input_type -> dubhe_ci.rpc.Repo
	3, // 6: dubhe_ci.rpc.Repository.Delete:input_type -> dubhe_ci.rpc.Id
	1, // 7: dubhe_ci.rpc.Repository.List:output_type -> dubhe_ci.rpc.RepoRecords
	0, // 8: dubhe_ci.rpc.Repository.Create:output_type -> dubhe_ci.rpc.Repo
	0, // 9: dubhe_ci.rpc.Repository.Find:output_type -> dubhe_ci.rpc.Repo
	4, // 10: dubhe_ci.rpc.Repository.Update:output_type -> dubhe_ci.rpc.Empty
	4, // 11: dubhe_ci.rpc.Repository.Delete:output_type -> dubhe_ci.rpc.Empty
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_repo_proto_init() }
func file_repo_proto_init() {
	if File_repo_proto != nil {
		return
	}
	file_page_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_repo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_repo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_repo_proto_goTypes,
		DependencyIndexes: file_repo_proto_depIdxs,
		MessageInfos:      file_repo_proto_msgTypes,
	}.Build()
	File_repo_proto = out.File
	file_repo_proto_rawDesc = nil
	file_repo_proto_goTypes = nil
	file_repo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryClient interface {
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*RepoRecords, error)
	Create(ctx context.Context, in *Repo, opts ...grpc.CallOption) (*Repo, error)
	Find(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Repo, error)
	Update(ctx context.Context, in *Repo, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type repositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryClient(cc grpc.ClientConnInterface) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*RepoRecords, error) {
	out := new(RepoRecords)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.Repository/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) Create(ctx context.Context, in *Repo, opts ...grpc.CallOption) (*Repo, error) {
	out := new(Repo)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.Repository/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) Find(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Repo, error) {
	out := new(Repo)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.Repository/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) Update(ctx context.Context, in *Repo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.Repository/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.Repository/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServer is the server API for Repository service.
type RepositoryServer interface {
	List(context.Context, *Page) (*RepoRecords, error)
	Create(context.Context, *Repo) (*Repo, error)
	Find(context.Context, *Id) (*Repo, error)
	Update(context.Context, *Repo) (*Empty, error)
	Delete(context.Context, *Id) (*Empty, error)
}

// UnimplementedRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedRepositoryServer struct {
}

func (*UnimplementedRepositoryServer) List(context.Context, *Page) (*RepoRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRepositoryServer) Create(context.Context, *Repo) (*Repo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRepositoryServer) Find(context.Context, *Id) (*Repo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedRepositoryServer) Update(context.Context, *Repo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRepositoryServer) Delete(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.Repository/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.Repository/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Create(ctx, req.(*Repo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.Repository/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Find(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.Repository/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Update(ctx, req.(*Repo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.Repository/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dubhe_ci.rpc.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Repository_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Repository_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Repository_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Repository_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Repository_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repo.proto",
}
