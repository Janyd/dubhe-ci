// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: credential.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Cred_CredentialTypes int32

const (
	Cred_UNKONWN    Cred_CredentialTypes = 0
	Cred_ACCOUNT    Cred_CredentialTypes = 1
	Cred_PUBLIC_KEY Cred_CredentialTypes = 2
)

// Enum value maps for Cred_CredentialTypes.
var (
	Cred_CredentialTypes_name = map[int32]string{
		0: "UNKONWN",
		1: "ACCOUNT",
		2: "PUBLIC_KEY",
	}
	Cred_CredentialTypes_value = map[string]int32{
		"UNKONWN":    0,
		"ACCOUNT":    1,
		"PUBLIC_KEY": 2,
	}
)

func (x Cred_CredentialTypes) Enum() *Cred_CredentialTypes {
	p := new(Cred_CredentialTypes)
	*p = x
	return p
}

func (x Cred_CredentialTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cred_CredentialTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_credential_proto_enumTypes[0].Descriptor()
}

func (Cred_CredentialTypes) Type() protoreflect.EnumType {
	return &file_credential_proto_enumTypes[0]
}

func (x Cred_CredentialTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cred_CredentialTypes.Descriptor instead.
func (Cred_CredentialTypes) EnumDescriptor() ([]byte, []int) {
	return file_credential_proto_rawDescGZIP(), []int{0, 0}
}

type Cred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CredentialType Cred_CredentialTypes `protobuf:"varint,3,opt,name=credentialType,proto3,enum=dubhe_ci.rpc.Cred_CredentialTypes" json:"credentialType,omitempty"`
	Username       string               `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password       string               `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	PublicKey      string               `protobuf:"bytes,6,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	PrivateKey     string               `protobuf:"bytes,7,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	CreatedAt      int64                `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      int64                `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Cred) Reset() {
	*x = Cred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credential_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cred) ProtoMessage() {}

func (x *Cred) ProtoReflect() protoreflect.Message {
	mi := &file_credential_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cred.ProtoReflect.Descriptor instead.
func (*Cred) Descriptor() ([]byte, []int) {
	return file_credential_proto_rawDescGZIP(), []int{0}
}

func (x *Cred) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cred) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cred) GetCredentialType() Cred_CredentialTypes {
	if x != nil {
		return x.CredentialType
	}
	return Cred_UNKONWN
}

func (x *Cred) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Cred) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Cred) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Cred) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Cred) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Cred) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Creds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*Cred `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *Creds) Reset() {
	*x = Creds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credential_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Creds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Creds) ProtoMessage() {}

func (x *Creds) ProtoReflect() protoreflect.Message {
	mi := &file_credential_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Creds.ProtoReflect.Descriptor instead.
func (*Creds) Descriptor() ([]byte, []int) {
	return file_credential_proto_rawDescGZIP(), []int{1}
}

func (x *Creds) GetRecords() []*Cred {
	if x != nil {
		return x.Records
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credential_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_credential_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_credential_proto_rawDescGZIP(), []int{2}
}

func (x *Key) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Key) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

var File_credential_proto protoreflect.FileDescriptor

var file_credential_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x1a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x02, 0x0a, 0x04, 0x43,
	0x72, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4f,
	0x4e, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x02, 0x22, 0x35, 0x0a, 0x05, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64,
	0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x32, 0xed,
	0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x64,
	0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x13, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x1a, 0x13, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x14,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x2e, 0x64, 0x75, 0x62, 0x68, 0x65, 0x5f, 0x63, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x64, 0x75, 0x62, 0x68,
	0x65, 0x5f, 0x63, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x22, 0x00, 0x42, 0x15,
	0x0a, 0x0d, 0x63, 0x6e, 0x2e, 0x6a, 0x61, 0x6e, 0x79, 0x64, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a,
	0x04, 0x2e, 0x3b, 0x70, 0x62, 0x50, 0x00, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_credential_proto_rawDescOnce sync.Once
	file_credential_proto_rawDescData = file_credential_proto_rawDesc
)

func file_credential_proto_rawDescGZIP() []byte {
	file_credential_proto_rawDescOnce.Do(func() {
		file_credential_proto_rawDescData = protoimpl.X.CompressGZIP(file_credential_proto_rawDescData)
	})
	return file_credential_proto_rawDescData
}

var file_credential_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_credential_proto_goTypes = []interface{}{
	(Cred_CredentialTypes)(0), // 0: dubhe_ci.rpc.Cred.CredentialTypes
	(*Cred)(nil),              // 1: dubhe_ci.rpc.Cred
	(*Creds)(nil),             // 2: dubhe_ci.rpc.Creds
	(*Key)(nil),               // 3: dubhe_ci.rpc.Key
	(*Empty)(nil),             // 4: dubhe_ci.rpc.Empty
	(*Id)(nil),                // 5: dubhe_ci.rpc.Id
}
var file_credential_proto_depIdxs = []int32{
	0, // 0: dubhe_ci.rpc.Cred.credentialType:type_name -> dubhe_ci.rpc.Cred.CredentialTypes
	1, // 1: dubhe_ci.rpc.Creds.records:type_name -> dubhe_ci.rpc.Cred
	4, // 2: dubhe_ci.rpc.CredentialService.List:input_type -> dubhe_ci.rpc.Empty
	1, // 3: dubhe_ci.rpc.CredentialService.Create:input_type -> dubhe_ci.rpc.Cred
	5, // 4: dubhe_ci.rpc.CredentialService.Delete:input_type -> dubhe_ci.rpc.Id
	4, // 5: dubhe_ci.rpc.CredentialService.RandomGenerateSshKey:input_type -> dubhe_ci.rpc.Empty
	2, // 6: dubhe_ci.rpc.CredentialService.List:output_type -> dubhe_ci.rpc.Creds
	4, // 7: dubhe_ci.rpc.CredentialService.Create:output_type -> dubhe_ci.rpc.Empty
	4, // 8: dubhe_ci.rpc.CredentialService.Delete:output_type -> dubhe_ci.rpc.Empty
	3, // 9: dubhe_ci.rpc.CredentialService.RandomGenerateSshKey:output_type -> dubhe_ci.rpc.Key
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_credential_proto_init() }
func file_credential_proto_init() {
	if File_credential_proto != nil {
		return
	}
	file_page_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_credential_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credential_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Creds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credential_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credential_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_credential_proto_goTypes,
		DependencyIndexes: file_credential_proto_depIdxs,
		EnumInfos:         file_credential_proto_enumTypes,
		MessageInfos:      file_credential_proto_msgTypes,
	}.Build()
	File_credential_proto = out.File
	file_credential_proto_rawDesc = nil
	file_credential_proto_goTypes = nil
	file_credential_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CredentialServiceClient is the client API for CredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CredentialServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Creds, error)
	Create(ctx context.Context, in *Cred, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	RandomGenerateSshKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error)
}

type credentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialServiceClient(cc grpc.ClientConnInterface) CredentialServiceClient {
	return &credentialServiceClient{cc}
}

func (c *credentialServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Creds, error) {
	out := new(Creds)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.CredentialService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) Create(ctx context.Context, in *Cred, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.CredentialService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.CredentialService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialServiceClient) RandomGenerateSshKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/dubhe_ci.rpc.CredentialService/RandomGenerateSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialServiceServer is the server API for CredentialService service.
type CredentialServiceServer interface {
	List(context.Context, *Empty) (*Creds, error)
	Create(context.Context, *Cred) (*Empty, error)
	Delete(context.Context, *Id) (*Empty, error)
	RandomGenerateSshKey(context.Context, *Empty) (*Key, error)
}

// UnimplementedCredentialServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCredentialServiceServer struct {
}

func (*UnimplementedCredentialServiceServer) List(context.Context, *Empty) (*Creds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCredentialServiceServer) Create(context.Context, *Cred) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCredentialServiceServer) Delete(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCredentialServiceServer) RandomGenerateSshKey(context.Context, *Empty) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomGenerateSshKey not implemented")
}

func RegisterCredentialServiceServer(s *grpc.Server, srv CredentialServiceServer) {
	s.RegisterService(&_CredentialService_serviceDesc, srv)
}

func _CredentialService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.CredentialService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cred)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.CredentialService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).Create(ctx, req.(*Cred))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.CredentialService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialService_RandomGenerateSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialServiceServer).RandomGenerateSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dubhe_ci.rpc.CredentialService/RandomGenerateSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialServiceServer).RandomGenerateSshKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CredentialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dubhe_ci.rpc.CredentialService",
	HandlerType: (*CredentialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CredentialService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CredentialService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CredentialService_Delete_Handler,
		},
		{
			MethodName: "RandomGenerateSshKey",
			Handler:    _CredentialService_RandomGenerateSshKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credential.proto",
}
